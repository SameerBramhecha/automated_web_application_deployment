name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AZURE_RESOURCE_GROUP: capstonerg
  AZURE_ACR_NAME: capstoneacrsamb
  AZURE_AKS_NAME: capstoneaksclusameerb
  SONAR_HOST_URL: https://sonarcloud.io
  SONAR_PROJECT_KEY: SameerBramhecha_automated_web_application_deployment

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        with:
          projectBaseDir: .  # Set the base directory for your project
          entryPoint: 'src/index.js'  # Adjust according to your main file
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}  # Store your token in GitHub Secrets
          SONAR_PROJECT_KEY: ${{ env.SONAR_PROJECT_KEY }}

      - name: Run npm audit
        run: npm audit --audit-level=high

  terraform:
    needs: build
    runs-on: ubuntu-latest
    env:
      TF_VAR_subscription_id : ${{ secrets.ARM_SUBSCRIPTION_ID}}
      TF_VAR_tenant_id : ${{ secrets.ARM_TENANT_ID}}
      TF_VAR_client_id : ${{ secrets.ARM_CLIENT_ID}}
      TF_VAR_client_secret : ${{ secrets.ARM_CLIENT_SECRET}}
    environment: production

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.0

      - name: Import Resource Group
        working-directory: infrastructure
        run: |
          terraform init
          terraform import azurerm_resource_group.rg /subscriptions/${{secrets.ARM_SUBSCRIPTION_ID}}/resourceGroups/capstonerg || true

      - name: Import AKS Cluster
        working-directory: infrastructure
        run: |
          terraform import azurerm_kubernetes_cluster.aks /subscriptions/${{secrets.ARM_SUBSCRIPTION_ID}}/resourceGroups/capstonerg/providers/Microsoft.ContainerService/managedClusters/capstoneaksclusameerb || true

      - name: Import ACR
        working-directory: infrastructure
        run: |
          terraform import azurerm_container_registry.acr /subscriptions/${{secrets.ARM_SUBSCRIPTION_ID}}/resourceGroups/capstonerg/providers/Microsoft.ContainerRegistry/registries/capstoneacrsamb || true

      - name: Terraform Init
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Validate
        working-directory: infrastructure
        run: terraform validate


      - name: Terraform Plan
        working-directory: infrastructure
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infrastructure
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          set -e  # Fail the job if any command fails
          terraform apply -auto-approve tfplan

  docker:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.AZURE_ACR_NAME }}.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker Image
        run: |
          docker build -t ${{ env.AZURE_ACR_NAME }}.azurecr.io/nodejs-microservice:${{ github.sha }} .

      - name: Push Docker Image
        run: |
          docker push ${{ env.AZURE_ACR_NAME }}.azurecr.io/nodejs-microservice:${{ github.sha }}

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.41.0/trivy_0.41.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.41.0_Linux-64bit.deb

      - name: Scan Docker Image with Trivy
        run: |
          trivy image --exit-code 1 --severity HIGH,CRITICAL ${{ env.AZURE_ACR_NAME }}.azurecr.io/nodejs-microservice:${{ github.sha }}

  deploy:
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_AKS_NAME }}

      - name: Verify Kubernetes Context
        run: |
          kubectl config current-context
          kubectl get nodes

      - name: Check if Deployment Exists
        id: deployment-check
        run: |
          if kubectl get deployments | grep -q "nodejs-microservice-deployment"; then
            echo "Deployment exists"
            echo "exists=true" >> $GITHUB_ENV
          else
            echo "Deployment does not exist"
            echo "exists=false" >> $GITHUB_ENV
          fi

      - name: Replace Image Tag in Deployment
        if: env.exists == 'true'
        run: |
          sed -i "s/\${IMAGE_TAG}/${{ github.sha }}/g" deployments.yaml

      - name: Apply Kubernetes Deployment
        if: env.exists == 'false'
        run: |
          kubectl apply -f deployments.yaml

      - name: Verify Deployment Creation
        if: env.exists == 'false'
        run: |
          kubectl rollout status deployment/nodejs-microservice-deployment

      - name: Update Kubernetes Deployment
        if: env.exists == 'true'
        run: |
          kubectl set image deployment/nodejs-microservice-deployment nodejs-microservice=${{ env.AZURE_ACR_NAME }}.azurecr.io/nodejs-microservice:${{ github.sha }}

      - name: Verify Deployment Update
        if: env.exists == 'true'
        run: |
          kubectl rollout status deployment/nodejs-microservice-deployment

      - name: Get Service External IP
        run: |
          kubectl get services nodejs-microservice-service